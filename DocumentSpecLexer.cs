//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\Construccion\Final\DocumentSpec.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DocumentSpecLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOLD=1, ITALIC=2, UNDERLINE=3, TITLE=4, TITEND=5, CORCHETE=6, CORCHETEFINAL=7, 
		LLAVE=8, LLAVEFINAL=9, COMA=10, HYPHEN=11, HEADING1=12, HEADING2=13, HEADING3=14, 
		TEXT=15, WORD=16, WS=17, NESTED=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "CORCHETE", "CORCHETEFINAL", 
		"LLAVE", "LLAVEFINAL", "COMA", "HYPHEN", "HEADING1", "HEADING2", "HEADING3", 
		"TEXT", "WORD", "WS", "NESTED"
	};


	public DocumentSpecLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DocumentSpecLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'~'", "'++'", "'>'", "'<'", "'['", "']'", "'{'", "'}'", 
		"','", "'-'", "'^'", "'^^'", "'^^^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "CORCHETE", "CORCHETEFINAL", 
		"LLAVE", "LLAVEFINAL", "COMA", "HYPHEN", "HEADING1", "HEADING2", "HEADING3", 
		"TEXT", "WORD", "WS", "NESTED"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DocumentSpec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DocumentSpecLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x14', 'h', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\a', '\x10', 'L', '\n', '\x10', '\f', '\x10', '\xE', '\x10', 'O', '\v', 
		'\x10', '\x3', '\x11', '\x6', '\x11', 'R', '\n', '\x11', '\r', '\x11', 
		'\xE', '\x11', 'S', '\x3', '\x12', '\x6', '\x12', 'W', '\n', '\x12', '\r', 
		'\x12', '\xE', '\x12', 'X', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x6', '\x13', '\x65', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', '\x66', '\x2', '\x2', '\x14', '\x3', '\x3', '\x5', 
		'\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', 
		'\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', 
		'\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', 
		'%', '\x14', '\x3', '\x2', '\x4', '\x5', '\x2', '\x32', ';', '\x43', '\\', 
		'\x63', '|', '\x5', '\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', 
		'r', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\'', '\x3', '\x2', '\x2', '\x2', '\x5', 
		')', '\x3', '\x2', '\x2', '\x2', '\a', '+', '\x3', '\x2', '\x2', '\x2', 
		'\t', '.', '\x3', '\x2', '\x2', '\x2', '\v', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\r', '\x32', '\x3', '\x2', '\x2', '\x2', '\xF', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x36', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x15', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '<', '\x3', '\x2', '\x2', '\x2', '\x19', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '@', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', 'G', '\x3', '\x2', '\x2', '\x2', '!', 
		'Q', '\x3', '\x2', '\x2', '\x2', '#', 'V', '\x3', '\x2', '\x2', '\x2', 
		'%', '\x64', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '&', '\x2', 
		'\x2', '(', '\x4', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x80', 
		'\x2', '\x2', '*', '\x6', '\x3', '\x2', '\x2', '\x2', '+', ',', '\a', 
		'-', '\x2', '\x2', ',', '-', '\a', '-', '\x2', '\x2', '-', '\b', '\x3', 
		'\x2', '\x2', '\x2', '.', '/', '\a', '@', '\x2', '\x2', '/', '\n', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x31', '\a', '>', '\x2', '\x2', '\x31', 
		'\f', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', ']', '\x2', '\x2', 
		'\x33', '\xE', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '_', 
		'\x2', '\x2', '\x35', '\x10', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', 
		'\a', '}', '\x2', '\x2', '\x37', '\x12', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\a', '\x7F', '\x2', '\x2', '\x39', '\x14', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\a', '.', '\x2', '\x2', ';', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\a', '/', '\x2', '\x2', '=', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '>', '?', '\a', '`', '\x2', '\x2', '?', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '@', '\x41', '\a', '`', '\x2', '\x2', '\x41', '\x42', '\a', '`', 
		'\x2', '\x2', '\x42', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', 
		'\a', '`', '\x2', '\x2', '\x44', '\x45', '\a', '`', '\x2', '\x2', '\x45', 
		'\x46', '\a', '`', '\x2', '\x2', '\x46', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'M', '\x5', '!', '\x11', '\x2', 'H', 'I', '\x5', '#', '\x12', 
		'\x2', 'I', 'J', '\x5', '!', '\x11', '\x2', 'J', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'N', ' ', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\t', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', '\"', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'W', '\t', '\x3', '\x2', '\x2', 'V', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '[', '\b', '\x12', '\x2', '\x2', '[', '$', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x65', '\x5', '\x3', '\x2', '\x2', ']', '\x65', '\x5', 
		'\x5', '\x3', '\x2', '^', '\x65', '\x5', '\a', '\x4', '\x2', '_', '\x65', 
		'\x5', '\t', '\x5', '\x2', '`', '\x65', '\x5', '\x19', '\r', '\x2', '\x61', 
		'\x65', '\x5', '\x1B', '\xE', '\x2', '\x62', '\x65', '\x5', '\x1D', '\xF', 
		'\x2', '\x63', '\x65', '\x5', '\x1F', '\x10', '\x2', '\x64', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x64', ']', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x64', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '`', '\x3', '\x2', '\x2', '\x2', '\x64', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'g', '&', '\x3', '\x2', '\x2', '\x2', '\b', '\x2', 'M', 
		'S', 'X', '\x64', '\x66', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
