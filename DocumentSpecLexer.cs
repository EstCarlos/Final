//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\Construccion\Final\DocumentSpec.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DocumentSpecLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOLD=1, ITALIC=2, UNDERLINE=3, TITLE=4, TITEND=5, HEADING1=6, HEADING2=7, 
		HEADING3=8, NESTED=9, TEXT=10, WORD=11, WS=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "HEADING1", "HEADING2", 
		"HEADING3", "NESTED", "TEXT", "WORD", "WS"
	};


	public DocumentSpecLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DocumentSpecLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'~'", "'++'", "'>'", "'<'", "'^'", "'^^'", "'^^^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "HEADING1", "HEADING2", 
		"HEADING3", "NESTED", "TEXT", "WORD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DocumentSpec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DocumentSpecLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'P', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x6', '\n', '\x38', '\n', '\n', '\r', '\n', '\xE', '\n', '\x39', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '@', '\n', 
		'\v', '\f', '\v', '\xE', '\v', '\x43', '\v', '\v', '\x3', '\f', '\x6', 
		'\f', '\x46', '\n', '\f', '\r', '\f', '\xE', '\f', 'G', '\x3', '\r', '\x6', 
		'\r', 'K', '\n', '\r', '\r', '\r', '\xE', '\r', 'L', '\x3', '\r', '\x3', 
		'\r', '\x2', '\x2', '\xE', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', 
		'\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', 
		'\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x3', '\x2', '\x4', '\x5', 
		'\x2', '\x32', ';', '\x43', '\\', '\x63', '|', '\x5', '\x2', '\v', '\f', 
		'\xF', '\xF', '\"', '\"', '\x2', 'Z', '\x2', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\a', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\t', '\"', '\x3', '\x2', '\x2', '\x2', '\v', '$', '\x3', 
		'\x2', '\x2', '\x2', '\r', '&', '\x3', '\x2', '\x2', '\x2', '\xF', '(', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '+', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x15', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x45', '\x3', '\x2', '\x2', '\x2', '\x19', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '&', '\x2', '\x2', '\x1C', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x80', '\x2', 
		'\x2', '\x1E', '\x6', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '-', 
		'\x2', '\x2', ' ', '!', '\a', '-', '\x2', '\x2', '!', '\b', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '@', '\x2', '\x2', '#', '\n', '\x3', '\x2', 
		'\x2', '\x2', '$', '%', '\a', '>', '\x2', '\x2', '%', '\f', '\x3', '\x2', 
		'\x2', '\x2', '&', '\'', '\a', '`', '\x2', '\x2', '\'', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\a', '`', '\x2', '\x2', ')', '*', '\a', 
		'`', '\x2', '\x2', '*', '\x10', '\x3', '\x2', '\x2', '\x2', '+', ',', 
		'\a', '`', '\x2', '\x2', ',', '-', '\a', '`', '\x2', '\x2', '-', '.', 
		'\a', '`', '\x2', '\x2', '.', '\x12', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x38', '\x5', '\x3', '\x2', '\x2', '\x30', '\x38', '\x5', '\x5', '\x3', 
		'\x2', '\x31', '\x38', '\x5', '\a', '\x4', '\x2', '\x32', '\x38', '\x5', 
		'\t', '\x5', '\x2', '\x33', '\x38', '\x5', '\r', '\a', '\x2', '\x34', 
		'\x38', '\x5', '\xF', '\b', '\x2', '\x35', '\x38', '\x5', '\x11', '\t', 
		'\x2', '\x36', '\x38', '\x5', '\x15', '\v', '\x2', '\x37', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x30', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x37', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x33', '\x3', '\x2', '\x2', '\x2', '\x37', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x14', '\x3', '\x2', '\x2', '\x2', ';', '\x41', 
		'\x5', '\x17', '\f', '\x2', '<', '=', '\x5', '\x19', '\r', '\x2', '=', 
		'>', '\x5', '\x17', '\f', '\x2', '>', '@', '\x3', '\x2', '\x2', '\x2', 
		'?', '<', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x16', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x41', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\t', '\x2', '\x2', 
		'\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', 
		'\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x18', '\x3', '\x2', '\x2', '\x2', 'I', 
		'K', '\t', '\x3', '\x2', '\x2', 'J', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 
		'N', 'O', '\b', '\r', '\x2', '\x2', 'O', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x2', '\x37', '\x39', '\x41', 'G', 'L', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
