//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from e:\Construccion\Final\DocumentSpec.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class DocumentSpecParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BOLD=1, ITALIC=2, UNDERLINE=3, TITLE=4, TITEND=5, HEADING1=6, HEADING2=7, 
		HEADING3=8, NESTED=9, TEXT=10, WORD=11, WS=12;
	public const int
		RULE_document = 0, RULE_text = 1, RULE_bold = 2, RULE_italic = 3, RULE_underline = 4, 
		RULE_title = 5, RULE_heading1 = 6, RULE_heading2 = 7, RULE_heading3 = 8, 
		RULE_nested = 9;
	public static readonly string[] ruleNames = {
		"document", "text", "bold", "italic", "underline", "title", "heading1", 
		"heading2", "heading3", "nested"
	};

	private static readonly string[] _LiteralNames = {
		null, "'$'", "'~'", "'++'", "'>'", "'<'", "'^'", "'^^'", "'^^^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BOLD", "ITALIC", "UNDERLINE", "TITLE", "TITEND", "HEADING1", "HEADING2", 
		"HEADING3", "NESTED", "TEXT", "WORD", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DocumentSpec.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DocumentSpecParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DocumentSpecParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DocumentSpecParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DocumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 29;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 20;
					text();
					}
					break;
				case BOLD:
					{
					State = 21;
					bold();
					}
					break;
				case ITALIC:
					{
					State = 22;
					italic();
					}
					break;
				case UNDERLINE:
					{
					State = 23;
					underline();
					}
					break;
				case TITLE:
					{
					State = 24;
					title();
					}
					break;
				case HEADING1:
					{
					State = 25;
					heading1();
					}
					break;
				case HEADING2:
					{
					State = 26;
					heading2();
					}
					break;
				case HEADING3:
					{
					State = 27;
					heading3();
					}
					break;
				case NESTED:
					{
					State = 28;
					nested();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOLD) | (1L << ITALIC) | (1L << UNDERLINE) | (1L << TITLE) | (1L << HEADING1) | (1L << HEADING2) | (1L << HEADING3) | (1L << NESTED) | (1L << TEXT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 2, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] BOLD() { return GetTokens(DocumentSpecParser.BOLD); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOLD(int i) {
			return GetToken(DocumentSpecParser.BOLD, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public BoldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bold; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBold(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoldContext bold() {
		BoldContext _localctx = new BoldContext(Context, State);
		EnterRule(_localctx, 4, RULE_bold);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(BOLD);
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 44;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 36;
					text();
					}
					break;
				case ITALIC:
					{
					State = 37;
					italic();
					}
					break;
				case UNDERLINE:
					{
					State = 38;
					underline();
					}
					break;
				case TITLE:
					{
					State = 39;
					title();
					}
					break;
				case HEADING1:
					{
					State = 40;
					heading1();
					}
					break;
				case HEADING2:
					{
					State = 41;
					heading2();
					}
					break;
				case HEADING3:
					{
					State = 42;
					heading3();
					}
					break;
				case NESTED:
					{
					State = 43;
					nested();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ITALIC) | (1L << UNDERLINE) | (1L << TITLE) | (1L << HEADING1) | (1L << HEADING2) | (1L << HEADING3) | (1L << NESTED) | (1L << TEXT))) != 0) );
			State = 48;
			Match(BOLD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ItalicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ITALIC() { return GetTokens(DocumentSpecParser.ITALIC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITALIC(int i) {
			return GetToken(DocumentSpecParser.ITALIC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext[] underline() {
			return GetRuleContexts<UnderlineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnderlineContext underline(int i) {
			return GetRuleContext<UnderlineContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public ItalicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_italic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitItalic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ItalicContext italic() {
		ItalicContext _localctx = new ItalicContext(Context, State);
		EnterRule(_localctx, 6, RULE_italic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(ITALIC);
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 59;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 51;
					text();
					}
					break;
				case BOLD:
					{
					State = 52;
					bold();
					}
					break;
				case UNDERLINE:
					{
					State = 53;
					underline();
					}
					break;
				case TITLE:
					{
					State = 54;
					title();
					}
					break;
				case HEADING1:
					{
					State = 55;
					heading1();
					}
					break;
				case HEADING2:
					{
					State = 56;
					heading2();
					}
					break;
				case HEADING3:
					{
					State = 57;
					heading3();
					}
					break;
				case NESTED:
					{
					State = 58;
					nested();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOLD) | (1L << UNDERLINE) | (1L << TITLE) | (1L << HEADING1) | (1L << HEADING2) | (1L << HEADING3) | (1L << NESTED) | (1L << TEXT))) != 0) );
			State = 63;
			Match(ITALIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnderlineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNDERLINE() { return GetTokens(DocumentSpecParser.UNDERLINE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERLINE(int i) {
			return GetToken(DocumentSpecParser.UNDERLINE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext[] bold() {
			return GetRuleContexts<BoldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoldContext bold(int i) {
			return GetRuleContext<BoldContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext[] italic() {
			return GetRuleContexts<ItalicContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ItalicContext italic(int i) {
			return GetRuleContext<ItalicContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext[] title() {
			return GetRuleContexts<TitleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TitleContext title(int i) {
			return GetRuleContext<TitleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context[] heading1() {
			return GetRuleContexts<Heading1Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading1Context heading1(int i) {
			return GetRuleContext<Heading1Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context[] heading2() {
			return GetRuleContexts<Heading2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading2Context heading2(int i) {
			return GetRuleContext<Heading2Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context[] heading3() {
			return GetRuleContexts<Heading3Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Heading3Context heading3(int i) {
			return GetRuleContext<Heading3Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext[] nested() {
			return GetRuleContexts<NestedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedContext nested(int i) {
			return GetRuleContext<NestedContext>(i);
		}
		public UnderlineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_underline; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnderline(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnderlineContext underline() {
		UnderlineContext _localctx = new UnderlineContext(Context, State);
		EnterRule(_localctx, 8, RULE_underline);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(UNDERLINE);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 74;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 66;
					text();
					}
					break;
				case BOLD:
					{
					State = 67;
					bold();
					}
					break;
				case ITALIC:
					{
					State = 68;
					italic();
					}
					break;
				case TITLE:
					{
					State = 69;
					title();
					}
					break;
				case HEADING1:
					{
					State = 70;
					heading1();
					}
					break;
				case HEADING2:
					{
					State = 71;
					heading2();
					}
					break;
				case HEADING3:
					{
					State = 72;
					heading3();
					}
					break;
				case NESTED:
					{
					State = 73;
					nested();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOLD) | (1L << ITALIC) | (1L << TITLE) | (1L << HEADING1) | (1L << HEADING2) | (1L << HEADING3) | (1L << NESTED) | (1L << TEXT))) != 0) );
			State = 78;
			Match(UNDERLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITLE() { return GetToken(DocumentSpecParser.TITLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TITEND() { return GetToken(DocumentSpecParser.TITEND, 0); }
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 10, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(TITLE);
			State = 81;
			Match(TEXT);
			State = 82;
			Match(TITEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading1Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADING1() { return GetToken(DocumentSpecParser.HEADING1, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading1; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading1(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading1Context heading1() {
		Heading1Context _localctx = new Heading1Context(Context, State);
		EnterRule(_localctx, 12, RULE_heading1);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(HEADING1);
			State = 85;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADING2() { return GetToken(DocumentSpecParser.HEADING2, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading2Context heading2() {
		Heading2Context _localctx = new Heading2Context(Context, State);
		EnterRule(_localctx, 14, RULE_heading2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			Match(HEADING2);
			State = 88;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Heading3Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEADING3() { return GetToken(DocumentSpecParser.HEADING3, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(DocumentSpecParser.TEXT, 0); }
		public Heading3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_heading3; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHeading3(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Heading3Context heading3() {
		Heading3Context _localctx = new Heading3Context(Context, State);
		EnterRule(_localctx, 16, RULE_heading3);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(HEADING3);
			State = 91;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED() { return GetToken(DocumentSpecParser.NESTED, 0); }
		public NestedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nested; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDocumentSpecVisitor<TResult> typedVisitor = visitor as IDocumentSpecVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNested(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedContext nested() {
		NestedContext _localctx = new NestedContext(Context, State);
		EnterRule(_localctx, 18, RULE_nested);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93;
			Match(NESTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\x62', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		' ', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '!', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', 
		'\x4', '/', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x30', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x6', '\x5', '>', '\n', '\x5', '\r', '\x5', '\xE', '\x5', '?', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x6', '\x6', 'M', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'N', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x2', '\x2', '\x2', 'x', '\x2', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x4', '#', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '%', '\x3', '\x2', '\x2', '\x2', '\b', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x43', '\x3', '\x2', '\x2', '\x2', '\f', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'V', '\x3', '\x2', '\x2', '\x2', '\x10', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\\', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x16', ' ', '\x5', '\x4', '\x3', '\x2', 
		'\x17', ' ', '\x5', '\x6', '\x4', '\x2', '\x18', ' ', '\x5', '\b', '\x5', 
		'\x2', '\x19', ' ', '\x5', '\n', '\x6', '\x2', '\x1A', ' ', '\x5', '\f', 
		'\a', '\x2', '\x1B', ' ', '\x5', '\xE', '\b', '\x2', '\x1C', ' ', '\x5', 
		'\x10', '\t', '\x2', '\x1D', ' ', '\x5', '\x12', '\n', '\x2', '\x1E', 
		' ', '\x5', '\x14', '\v', '\x2', '\x1F', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', 
		'!', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\a', '\f', '\x2', '\x2', '$', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '%', '.', '\a', '\x3', '\x2', '\x2', '&', '/', '\x5', '\x4', '\x3', 
		'\x2', '\'', '/', '\x5', '\b', '\x5', '\x2', '(', '/', '\x5', '\n', '\x6', 
		'\x2', ')', '/', '\x5', '\f', '\a', '\x2', '*', '/', '\x5', '\xE', '\b', 
		'\x2', '+', '/', '\x5', '\x10', '\t', '\x2', ',', '/', '\x5', '\x12', 
		'\n', '\x2', '-', '/', '\x5', '\x14', '\v', '\x2', '.', '&', '\x3', '\x2', 
		'\x2', '\x2', '.', '\'', '\x3', '\x2', '\x2', '\x2', '.', '(', '\x3', 
		'\x2', '\x2', '\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', '.', '*', '\x3', 
		'\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x33', '\a', '\x3', '\x2', '\x2', '\x33', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '=', '\a', '\x4', '\x2', '\x2', '\x35', '>', 
		'\x5', '\x4', '\x3', '\x2', '\x36', '>', '\x5', '\x6', '\x4', '\x2', '\x37', 
		'>', '\x5', '\n', '\x6', '\x2', '\x38', '>', '\x5', '\f', '\a', '\x2', 
		'\x39', '>', '\x5', '\xE', '\b', '\x2', ':', '>', '\x5', '\x10', '\t', 
		'\x2', ';', '>', '\x5', '\x12', '\n', '\x2', '<', '>', '\x5', '\x14', 
		'\v', '\x2', '=', '\x35', '\x3', '\x2', '\x2', '\x2', '=', '\x36', '\x3', 
		'\x2', '\x2', '\x2', '=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '=', 
		':', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'=', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '=', '\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\a', '\x4', 
		'\x2', '\x2', '\x42', '\t', '\x3', '\x2', '\x2', '\x2', '\x43', 'L', '\a', 
		'\x5', '\x2', '\x2', '\x44', 'M', '\x5', '\x4', '\x3', '\x2', '\x45', 
		'M', '\x5', '\x6', '\x4', '\x2', '\x46', 'M', '\x5', '\b', '\x5', '\x2', 
		'G', 'M', '\x5', '\f', '\a', '\x2', 'H', 'M', '\x5', '\xE', '\b', '\x2', 
		'I', 'M', '\x5', '\x10', '\t', '\x2', 'J', 'M', '\x5', '\x12', '\n', '\x2', 
		'K', 'M', '\x5', '\x14', '\v', '\x2', 'L', '\x44', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\x45', '\x3', '\x2', '\x2', '\x2', 'L', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'G', '\x3', '\x2', '\x2', '\x2', 'L', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\a', '\x5', 
		'\x2', '\x2', 'Q', '\v', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\x6', 
		'\x2', '\x2', 'S', 'T', '\a', '\f', '\x2', '\x2', 'T', 'U', '\a', '\a', 
		'\x2', '\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '\b', 
		'\x2', '\x2', 'W', 'X', '\a', '\f', '\x2', '\x2', 'X', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\t', '\x2', '\x2', 'Z', '[', '\a', '\f', 
		'\x2', '\x2', '[', '\x11', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', 
		'\n', '\x2', '\x2', ']', '^', '\a', '\f', '\x2', '\x2', '^', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '_', '`', '\a', '\v', '\x2', '\x2', '`', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x1F', '!', '.', '\x30', '=', '?', 
		'L', 'N',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
